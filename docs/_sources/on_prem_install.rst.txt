Insight.io Private Cloud Version Quick Install
=================================================

Intro
-------------
This document is a step-by-step guide to install Insight.io on your private cloud server. 

Please note that due to different internet environment in China, we have a slight different install process if you are using a machine within China. Please make sure to ignore the steps marked by (**Outside of China**) and instead follow the steps marked by (**In China**) to speed up the installation.

Prerequisites
-------------
In order to install Insight.io, make sure you have the following pre-requisites before you start:

* A DockerHub account or a registry.lambdalab.io account (if you are in China)

* An Ubuntu machine with root access. Note that port80(http) and port22(ssh) need to be opened.

* The Ubuntu machine must fulfill the minimum system requirements:

    * 16G RAM
    * 200G Hard Drive (SSD preferred)

* Make sure max virtual memory is big enough by running

.. code-block:: shell

    sudo sysctl -w vm.max_map_count=262144

If you intended to deploy the service in very huge scale (100G+ repo), you may want to talk with
insight.io team before proceeding.

**Important Security Notice**
Due to its service oriented architecture, Insight.io will use certain ports for communication between services. These ports are only used internally. It is highly recommended for you to NOT expose thse ports to external network to prevent these ports to be exploited by attackers. Here are a list of these ports:

    port 8080
    port 9000
    port 10060
    port 27017
    port 28017
    port 50000

Install Docker and Docker Compose
-------------

(**Outside of China**) If you have installed Docker and Docker Compose, you can skip this step. Otherwise You need to install Docker and Docker Compose first.

.. code-block:: shell

    curl -sSL https://get.docker.com/ | sh
    sudo usermod -aG docker $USER

    sudo sh -c 'curl -L https://github.com/docker/compose/releases/download/1.10.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose'
    sudo chmod +x /usr/local/bin/docker-compose

(**In China**) If you are in ``China``, instead you could do:

.. code-block:: shell

    curl -sSL https://get.daocloud.io/docker | sh
    sudo usermod -aG docker $USER

    sudo sh -c 'curl -L https://get.daocloud.io/docker/compose/releases/download/1.10.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose'
    sudo chmod +x /usr/local/bin/docker-compose

If this is first time you install Docker and Docker Compose, it is highly recommended to RESTART the machine before you continue: 

``sudo reboot``

Authentication
-------------

(**CentOS only**) For some Linux version such as CentOS, Docker may not be automatically running after system reboot, in which case you may need to restart Docker process manually first to proceed:

::

    sudo systemctl start docker

(**Outside of China**) To be able to pull the images, you need log into docker hub with your user name which is already authorized by lambdalab
If you haven't got authorized, please send an email to lambdalab@lambdalab.io.

::

    docker login

(**In China**) If you are in ``China``, please use our private registry for better speed.

First, you need to register an account at 

``https://registry.lambdalab.io``

and ask lambdalab@lambdalab.io to authorize your account, then you need do

::

    docker login registry.lambdalab.io


Clone Git Repo for Docker Compose
-------------
(**Outside of China**) To save unnecessary authentication, the docker compose file and our configuration files (in HOCON format) is release
through public git repo:

``git clone https://github.com/lambdalab/lambdalab-docker``

(**In China**) If you are in ``China``, please use our CSDN git repository:

``git clone https://code.csdn.net/lambdalab/lambdalab-docker.git``

The repo contains two sets of files: docker-compose.yml which is used to start the services. ``configs/*.conf`` files which
are consumed by our services inside the container (the ``configs`` directory is mounted into all the containers that run
our services)

You could customize the services by directly modify the files in the git repo and do rebase everytime we have a update.

All data generated by our services will be stored in ``data`` directory located in the same level with 'docker-compose.yml'
and all logs generated by our services will be stored in ``logs`` directory.


Configure Kerberos Authentication
-------------

This section explains how to integrate insight.io with Kerberos authentication. You can skip this part if you are not using Kerberos authentication.

Log into the machine that host the KDC server and add a principle called 'git', if not existed already:

::

    kadmin.local


::

    addprinc git


::

    ktadd -norandkey git

Log into the machine that you are planning to run insight.io with, change to user ``root``, and generate a valid kerberos ticket.

::

    sudo su root

::

    kinit git

Then the Kerberos authentication part is all-set. insight.io will automatically use the newly generated ticket as authorization credentials. But please make sure the ticket is always valid by manually setting the ticket expiration time or periodically running ``kinit``. 


Download Docker Image and Start Docker Services
-------------

Under the root of the git repo(lambdalab-docker), run the following script:

(**In China**) If you are in China, please use **./cn-lambda-compose** instead of **./lambda-compose** in all the following cases)

``./lambda-compose up -d``

This script will download or upgrade all necessary docker images and start all docker services, it could take a while for the first time. After the script is done, run the following command to verify the services:

``./lambda-compose ps``

You should see all the docker services lists similar to this:

.. image:: images/dockerps.png
  :align: center

Open a browser and try to access the public DNS of the server with ``http`` protocal. For example, if you are using AWS as your cloud service, this address may look like:

``http://ec2-52-35-135-191.us-west-2.compute.amazonaws.com`` 

verify that you can see Insight.io home page as showing below:

.. image:: images/codatlas_homepage.png
  :align: center

You are done with the setting up Insight.io if you are not using it with Github Integration. Please refer to `User Guide <user_guide.html>`_ for details on how to use it.

Configure Github Integration
-------------
This section is only necessary if you want to integrate Insight.io with Github, it's highly recommended if you use Github as your code hosting service. 

Log into your github account and go to ``Settings`` then ``OAuth applications`` then ``Developer applications`` tab.

Click on ``Register new application`` button and fill in ``Application name`` and ``Application description`` section with preferred text. Fill in ``Homepage URL`` and ``Authorization callback URL`` with public DNS of the server, e.g. ``http://ec2-52-35-135-191.us-west-2.compute.amazonaws.com``. Click ``Register Application`` to create a new OAuth application. Note ``Client ID`` and ``Client Secret`` Github provided with the newly created application.

Go back to the bash terminal, open and edit the ``lambda-enterprise.conf`` file:

.. code-block:: bash

  vi ./lambdalab-docker/configs/lambdalab-enterprise.conf

And change ``ClientId`` and ``ClientSecret`` fields of both ``github-private`` and ``github`` sections to be the ``Client ID`` and ``Client Secret`` of your github application you just created:

.. code-block:: bash

  github {
    authorizationUrl="https://github.com/login/oauth/authorize"
    accessTokenUrl="https://github.com/login/oauth/access_token"
    clientId=d1d8e43a14e1f3e1e2d8
    clientSecret=ac383f2f378015a06d8d55ef340a029d4314ec0f
    scope="user:email,public_repo"
  }

After the change, restart codatlas process:

.. code-block:: bash

  ./lambda-compose restart codatlas

Go back to your browser and go to Insight.io Home Page, click on ``Login`` button on the top right, and then click on ``Login with Github``, make sure you can successfully login with your Github account.

You are done with integrate Insight.io with Github! Please refer to `User Manual <user_guide.html>`_ for details on how to use it.

Configure Gitlab Integration
-------------
Insight.io also support integration with ``Gitlab``. This section describes the operations to integrate with `Gitlab <https://gitlab.com/>`_.


**Normal Integration**

Similar to configuring github integration, the first step is to create a new OAuth application. Log into your gitlab account and go to ``settings`` page, then click on ``Application`` tag, and then enter a name for your application. The name can be any of your preferred strings. Fill the public IP/DNS of your host server into ``Redirect URI`` followed with "/authenticate/gitlab", e.g. ``http://ec2-52-35-135-191.us-west-2.compute.amazonaws.com/authenticate/gitlab``. Then add ``api`` scope and ``read_user`` scope. Finally, finish creating the OAuth application by clicking save application.

Go back to the bash terminal, open and edit the ``lambda-enterprise.conf`` file:

.. code-block:: bash

  vi ./lambdalab-docker/configs/lambdalab-enterprise.conf

Add the authorization/accessToken url and the newly acquired OAUTH client ID and OAUTH client secret into the config:

.. code-block:: bash

  gitlab {
    // The OAUTH Client ID
    clientId=YOUR-GITLAB-CLIENT-ID
    // The OAUTH Client secret
    clientSecret=YOUR-GITLAB-CLIENT-SECRET
    authorizationUrl="http://YOUR-GITLAB-IP/oauth/authorize"
    accessTokenUrl="http://YOUR-GITLAB-IP/oauth/token" 
  }

After the change, restart codatlas process:

.. code-block:: bash

  ./lambda-compose restart codatlas

Go back to your browser and go to Insight.io Home Page, click on Login button on the top right, and then click on Login with Gitlab, make sure you can successfully login with your Gitlab account.


**Integration With LDAP**

Insight.io also support integration with ``LDAP`` to support user authentication. This section describes how to integrated with both ``LDAP`` and ``Gitlab``.

To start with, you need to have a functional LDAP server and a Gitlab server. The first step is to integrated Gitlab with LDAP, which has been described by `Gitlab Docs <https://docs.gitlab.com/ce/administration/auth/ldap.html>`_.

After integrating Gitlab with LDAP, we can now start to integrate Insight.io into the stack. Log into your Gitlab admin account and goto ``Profile Settings``, then click on the ``Account`` tag to get your ``Private Token``.

Go back to the bash terminal, open and edit the ``lambda-enterprise.conf`` file:

.. code-block:: bash

  vi ./lambdalab-docker/configs/lambdalab-enterprise.conf

Configure the ``ldap`` section under ``securesocial`` like following:

.. code-block:: bash

    securesocial {

      ldap {
        
        //  Configurations of other components that integrates with LDAP.
        integration {
          // Gitlab integration.   
          gitlab {
            // Gitlab host url.
            gitlabUrl = "YOUR-GITLAB-URL"
            
            // Gitlab administrator account's private token.
            rootPrivateToken = ""
          }
        }
    
        //  the full url of the ldap server, including protocal, hostname and port
        //  e.g. "ldaps://localhost:636" , "ldap://localhost:389"
        providerUrl="ldap://localhost:389"
    
        //  search base from which the employee will be searched from
        searchBase="dc=example,dc=com"
    
        //  whether to use ssl when search ldap directory
        //  usually if it is turned on, providerUrl should starts with ldaps protocal with 636 port
        //  Also note that if your server is using a self-signed CA, add the CA into the keystore of your jvm otherwise
        //  there will be an SSL handshake error
        // useSsl=true
      }

    }

After the change, restart codatlas process:

.. code-block:: bash

  ./lambda-compose restart codatlas

Go back to your browser and go to Insight.io Home Page, click on Login button on the top right, and the login information should have changed from “Email” to “LDAP Username”, which means you have successfully configured LDAP authentication. Enter your LDAP credentials and you should be abled to login.

You are done with integrate Insight.io with Gitlab! Please refer to User Manual for details on how to use it.

Upgrade Insight.io
-------------
Upgrading Insight.io is made easy, fast and version-controlled as we manage update process with lambda-docker git repository. The first step of upgrade is save you local config change by 'git commit' or 'git stash' and the do:

::

    git pull --rebase

on the docker compose git repo.

Then as mentioned before, if just docker-compose file is changed,

::

    ./lambda-compose up -d

could automatically restart the outdated
services. However, when config files under `configs` directory changes, `docker-compose up -d` will not know
who to update, therefore, whenever changes are made to the config files, it is more safe to do

::

    ./lambda-compose restart

to let tasks in containers run with new configs.

Deploy Insight.io with Multiple Machines
-------------
If your repositories take a lot of resources to build, it could be helpful or necessary to isolate build related services from frontend services from underlying database and search index. Fortunately Insight.io's micro-service architecture and dockerized deployment makes this easy. 

The recommended way to seperate the services will be group them into 3 groups, namely:

1. Frontend services: codatlas, redis, liaceservice, dataservice, projectservice, metadataservice, ngnix, jenkins(master)

2. Db services: db, elasticsearch

3. Build services (could have more than one machines): jenkins-slave

To start, make sure you have 3 machines ready with docker and docker-compose installed, and lambdalab-docker repository checked out.

On all three machines, switch to ``distributed`` branch by

``git pull``

``git checkout distributed``

and add the hostname of each machine by edit the following file:

``vi configs/lambdalab-cluster.conf``

Change the following lines of config variable to the hostname of the machines like the following:

.. code-block:: shell  

    # frontend cluster host name, for single machine deployment set this to codatlas
    vars.cluster.frontend = "ec2-35-163-118-155.us-west-2.compute.amazonaws.com"

    # builder cluster host name, for single machine deployment set this to jenkins
    vars.cluster.builder = "ec2-35-164-137-4.us-west-2.compute.amazonaws.com"

    # db cluster host name, for single machine deployment set this to db
    vars.cluster.db = "ec2-35-166-120-102.us-west-2.compute.amazonaws.com"

Specify the jenkins master address for their slaves at in ``docker-compose.yml``. Replace
``- JENKINS_MASTER=http://jenkins:8080`` to your jenkins master's address.

Run the following command on each machine respectively:

On Frondend machine:

``./lambda-compose up -d liaceservice dataservice projectservice codatlas nginx redis pygments jenkins metadataservice``

On Db machine:

``/lambda-compose up -d db elasticsearch``

On Builder machine(s):

``/lambda-compose up -d jenkins-slave``

After everything is running, you should be able to access Insight.io by visiting frontend machine's hostname from your browser.

Common Process Management with Docker Compose
-------------
``docker-compose`` is a command line util to manage docker containers. It should be run under the folder where the ``docker-compose.yaml`` exists. We added a simple wrapper around it called ``lambda-compose`` to set all enviroment variables properly.
Common operations are as follows:

list process
~~~~~~~~~

::

    ./lambda-compose ps

start whole Insight.io enterprise stack
~~~~~~~~~

::

    ./lambda-compose up -d

which is equivalent to use

::

    ./lambda-compose -f docker-compose.yml up -d

start a particular services
~~~~~~~~~

::

    ./lambda-compose up -d $service


attach to a all containers' output
~~~~~~~~~

::

    ./lambda-compose logs -f


attach to a container’s output
~~~~~~~~~

::

    ./lambda-compose logs -f $service


stop and then clean all the contains
~~~~~~~~~

::

    ./lambda-compose down


run command inside (similar to ssh)
~~~~~~~~~
::

    ./lambda-compose run $container /bin/bash


find help
~~~~~~~~~
There are also kill/restart/rm commands if needed. use

::

    ./lambda-compse help $command_name

to find more details.





