Process Management in Production with Docker
================================

We begin to use docker hub to store our dockerized services and docker-compose to orchestra the services.

Install Docker and Docker Compose
~~~~~~~~~~~~~~~~~~~

Docker and Docker Compose needed to be installed at the first time.

.. code-block:: shell

    curl -sSL https://get.docker.com/ | sh
    sudo usermod -aG docker $USER

    sudo sh -c 'curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose'
    sudo chmod +x /usr/local/bin/docker-compose

If you are in China, you could do:

.. code-block:: shell

    curl -sSL https://get.daocloud.io/docker | sh
    sudo usermod -aG docker $USER

    sudo sh -c 'curl -L https://get.daocloud.io/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose'
    sudo chmod +x /usr/local/bin/docker-compose

If you want to install on Mac or windows, please refer to: http://www.docker.com/products/docker#/mac

Authentication
~~~~~~~~~~~~~~~~~~~
To be able to pull the images, you need log into docker hub with your user name which is already authorized by lambdalab
If you haven't got autherized, please send an email to lambdalab@lambdalab.io.

::

    docker login $username

Git Repo
~~~~~~~~~~~~~~~~~~~
To save unnecessary authentication, the docker compose file and our configuration files (in HOCON format) is release
through public git repo:

``git clone https://github.com/lambdalab/lambdalab-docker``

however you'll need to login docker hub in order to pull images.

The repo contains two sets of files: docker-compose.yml which is used to start the services. ``configs/*.conf`` files which
are consumed by our services inside the container (the ``configs`` directory is mounted into all the containers that run
our services)

You could customize the services by directly modify the files in the git repo and do rebase everytime we have a update.

All data generated by our services will be stored in ``data`` directory located in the same level with 'docker-compose.yml'
and all logs generated by our services will be stored in ``logs`` directory.

Command line
~~~~~~~~~~~~~~~~~~~
``docker-compose`` is a command line util to manage docker containers. It should be run under the folder where the ``docker-compose.yaml`` exists.
Common operations are as follows:

list process
--------

::

    docker-compose ps

start Codatlas enterprise stack
--------

::

    docker-compose up -d

which is equivalent to use

::

    docker-compose -f docker-compose.yml up -d

start Editor server stack
--------

::

    docker-compose -f docker-compose-editorserver.yml up -d

when docker compose file updated, run it again and it will automatically update your containers.


start a particular services
--------

::

    docker-compose up -d $service


attach to a all containers' output
--------

::

    docker-compose logs -f


attach to a containerâ€™s output
--------

::

    docker-compose logs -f $service


stop and then clean all the contains
--------

::

    docker-compose down


run command inside (similar to ssh)
--------
::

    docker-compose run $container /bin/bash


find help
--------
There are also kill/restart/rm commands if needed. use

::

    docker-compse help $command_name

to find more details.

Upgrade
~~~~~~~~~~~~~~~~~~~
The first step of upgrade is save you local config change by 'git commit' or 'git stash' and the do:

::

    git pull --rebase

on the docker compose git repo.

Then as mentioned before, if just docker-compose file is changed,

::

    docker-compose up -d

could automatically restart the outdated
services. However, when config files under `configs` directory changes, `docker-compose up -d` will not know
who to update, therefore, whenever changes are made to the config files, it is more safe to do

::

    docker-compose restart

to let tasks in containers run with new configs


Web control panel
~~~~~~~~~~~~~~~~~~~

There is no official Web UI exists, but check out francescou/docker-compose-ui for more information.

